/**
 * @fileoverview This module is used for observing package level browser 
 * events for Alpheios extensions. Exports a single symbol, PgkMgr, which
 * must be imported into the namespace of the importing class.
 *
 * @version $Id$
 * 
 * Copyright 2008-2009 Cantus Foundation
 * http://alpheios.net
 * 
 * This file is part of Alpheios.
 * 
 * Alpheios is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * 
 * Alpheios is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

var EXPORTED_SYMBOLS = ["PkgMgr"];

Components.utils.import("resource://alpheios/alpheios-browser-utils.jsm");

/**
 * @class implements nsIObserver interface
 * @see https://developer.mozilla.org/en/nsIObserver
 * @see https://developer.mozilla.org/en/Observer_Notifications
 */
PkgMgr =
{ 
    /**
     * constant for grouping quit-application-granted observers
     * @type String 
     * @static
     */
    TYPE_QUIT: 'Q',
    
    /**
     * constant for grouping item-uninstalled observers
     * @type String 
     * @static
     */
    TYPE_UNINSTALL: 'I',

    /**
     * constant for grouping sessionstore-windows-restored observers
     * @type String 
     * @static
     */
    TYPE_RESTORE: 'R',

    /**
     * data object to hold per-package observer functions (grouped by type)
     * @type Object
     * @private
     */
    d_obs: {},
    
    /**
     * Array to hold observer functions for uninstalled extensions pending application restart
     * @type Array
     * @private 
     */
    d_uninstall: Array(),
    
    /**
     * observe an extension action request
     * @param {nsiIsupports} a_subject the subject of the request
     * @param {String} a_topic the name of the event
     * @param {String} a_data additional data about the event
     */
    observe : function(a_subject, a_topic, a_data) 
    {
        // em-action-requested events are generated by the Mozilla Add-Ons manager
        if (a_topic == "em-action-requested") 
        {
            a_subject.QueryInterface(Components.interfaces.nsIUpdateItem);
            BrowserUtils.debug("Observing " + a_data + " for " + a_subject.id);
            
            if (a_data == "item-uninstalled" &&
                this.d_obs[this.TYPE_UNINSTALL][a_subject.id] )
            {
                // if a package with a registered uninstall observer is being uninstalled
                // copy the callback reference to the d_uninstall array pending the application restart
                this.d_uninstall[a_subject.id] = this.d_obs[this.TYPE_UNINSTALL][a_subject.id];
            } 
            else if (a_data == "item-cancel-action" &&  
                // if the uninstall request for a registered package has been cancelled,
                // remove the function reference from the array of pending callbacks
                this.d_uninstall[a_subject.id] ) 
            {
                this.d_uninstall[a_subject.id] = false;
            }        
        }
        // quit-application-granted is generated before the mozilla application shuts down
        else if (a_topic == "quit-application-granted") 
        { 
            for (var pkg in this.d_uninstall)
            {         
                // if we have any pending uninstall callbacks, execute them now
                if (typeof this.d_uninstall[pkg] == 'function')
                {
                    this.d_uninstall[pkg]();
                }
            };
            for (var pkg in this.d_obs[this.TYPE_QUIT])
            {
                // execute any registered application quit observer callbacks
                if (typeof this.d_obs[this.TYPE_QUIT][pkg] == 'function')
                {
                    this.d_obs[this.TYPE_QUIT][pkg]();
                }
            }
        }
        else if (a_topic == "sessionstore-windows-restored")
        {   
            for (var pkg in this.d_obs[this.TYPE_RESTORE])
            {
                // execute any registered session restore observer callbacks
                if (typeof this.d_obs[this.TYPE_RESTORE][pkg] == 'function')
                {
                    this.d_obs[this.TYPE_RESTORE][pkg]();
                }
            }
            
        }
    },
    
    /**
     * register a package to observe
     * @param {String} a_type the type of observer (one of PkgMgr.TYPE_QUIT or PkgMgr.TYPE_UNINSTALL) 
     * @param {String} a_id the package id
     * @param {Function} a_callback callback function to execute upon update
     * @param {Function} a_ctx callback function context
     * @param {Array} a_params callback function parameters 
     */
    registerPkg : function(a_type,a_id,a_callback,a_ctx,a_params) 
    {
        BrowserUtils.debug("registering observer " + a_type + " for " + a_id);
        this.d_obs[a_type][a_id] = function() { a_callback.apply(a_ctx,a_params) } || function(){};
        
    },
    
    /**
     * register the observer object
     * @param {String} a_type the type of observer (one of PkgMgr.TYPE_QUIT or PkgMgr.TYPE_UNINSTALL)
     * @param {Array} a_ids the list of Alpheios package id objects 
     *                      each package id object must contain 'id' (String) and 'callback' (function) 
     *                      properties
     */
    registerObserver : function(a_type,a_pkgs) 
    {
        var my_obj = this;
        
        if (! this.d_obs[a_type])
        {
            this.d_obs[a_type] = Array();
            
            a_pkgs.forEach(
                function(a_pkg)
                {
                    my_obj.registerPkg(a_type, a_pkg.id, a_pkg.callback, a_pkg.ctx, a_pkg.params);
                }
            );
        }
    },
    
    /**
     * Add the observer object to the observer service
     * call once all packages' observers have been registered with the object
     */
    start: function()
    {
        BrowserUtils.debug("Installing PkgMgr Observers");
        var observerService =
            Components.classes["@mozilla.org/observer-service;1"].
            getService(Components.interfaces.nsIObserverService);
        observerService.addObserver(this, "em-action-requested", false); 
        observerService.addObserver(this, "quit-application-granted", false);
        observerService.addObserver(this,"sessionstore-windows-restored",false);
    },

    /**
     * unregister the observer object from the observer service
     */
    unregisterObserver : function(a_type) 
    {
        var observerService =
            Components.classes["@mozilla.org/observer-service;1"].
            getService(Components.interfaces.nsIObserverService);

        observerService.removeObserver(this,"em-action-requested");
        observerService.removeObserver(this,"quit-application-granted");
        observerService.removeObserver(this,"sessionstore-windows-restored");
    }
}