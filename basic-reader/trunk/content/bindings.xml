<?xml version="1.0" encoding="UTF-8"?>

<!DOCTYPE window [
<!ENTITY % alpheiosDTD SYSTEM "chrome://alpheios/locale/alpheios.dtd">
%alpheiosDTD;
]>

<bindings xmlns="http://www.mozilla.org/xbl"
    xmlns:xbl="http://www.mozilla.org/xbl"
    xmlns:xul="http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul">
    
    <binding id="alpheiosPanel" extends="xul:box" orient="vertical">
        <content>
            <xul:toolbox anonid="panelToolbox">
                <xul:toolbar anonid="panelToolbar" align="center">
                    <xul:toolbaritem class="alpheios-logo">
                        <xul:image src="chrome://alpheios/skin/alpheios.png"/>
                    </xul:toolbaritem>
                    <children includes="toolbaritem|toolbarbutton|toolbarspring"/>
                    <xul:toolbarspring/>
                    <xul:toolbarbutton 
                        anonid="panelOptionsButton"
                        type="menu" 
                        class="toolbarbutton-class" 
                        hidden="true" 
                        label="&alpheios.panel.options;">
                        <xul:menupopup anonid="panelOptionsPopup">
                            <children includes="menu|menuitem"/>
                        </xul:menupopup>
                    </xul:toolbarbutton>
                    <xul:toolbarbutton 
                        anonid="panelDetachButton" 
                        class="alph-detach-button"
                        tooltiptext="&alpheios.panel.detach;"/>
                    <xul:toolbarbutton 
                        anonid="panelCloseButton" 
                        class="alph-close-button"
                        tooltiptext="&alpheios.panel.close;"/>
                </xul:toolbar>
            </xul:toolbox>
            <xul:box anonid="browserBox" flex="1" xbl:inherits="orient=panelorient">
                <children includes="browser|splitter|tabbox"/>
            </xul:box>
            <children/>
        </content>
        <implementation>
            <constructor><![CDATA[
            this.optionsPopup = 
                document.getAnonymousElementByAttribute(this, "anonid", "panelOptionsPopup");
            this.browserBox = 
                document.getAnonymousElementByAttribute(this, "anonid", "browserBox");
            this.panel_id = this.getAttribute("id");
            this.closeButton =
                document.getAnonymousElementByAttribute(this, "anonid", "panelCloseButton");
            this.closeButton.setAttribute("oncommand",
                "Alph.main.toggle_panel(event,'" + this.panel_id + "')");
            this.detachButton =
                document.getAnonymousElementByAttribute(this, "anonid", "panelDetachButton");
            this.detachButton.setAttribute("oncommand", 
                "document.getElementById('" + this.panel_id + "').toggle()");
            if (typeof Alph.main != 'undefined')
            {
                Alph.main.panelBound(this);
            }
            else
            {
                this.detachButton.setAttribute("hidden","true");
                this.closeButton.setAttribute("hidden","true");
            }
            ]]></constructor>
            <method name="toggle">
                <body><![CDATA[
            var panelObj;
            if (typeof Alph.main != "undefined")
            {
                panelObj = Alph.main.panels[this.panel_id];
                if (typeof panelObj != "undefined")
                {
                    panelObj.toggle();
                }
            }
            ]]></body>
            </method>
            <method name="get_panel_ctl">
                <body><![CDATA[
            var panelObj;
            if (typeof Alph.main != "undefined")
            {
                return Alph.main.panels[this.panel_id];
            }
            ]]></body>
            </method>
        </implementation>
    </binding>
    
</bindings>